package com.dfedorino.rtasks.third_level.structures;

import java.util.List;

public interface ProtectedQueueProtocol {
    /**
     * Реализуйте структуру данных "очередь". Напишите программу:
     * 1. содержащую описание очереди;
     * 2. моделирующую работу очереди;
     * 2.1 push n - Добавить в очередь число n (значение n задается после команды). Программа должна вывести ok;
     * 2.2 pop - Удалить из очереди первый элемент. Программа должна вывести его значение;
     * 2.3 front - Программа должна вывести значение первого элемента, не удаляя его из очереди;
     * 2.4 size - Программа должна вывести количество элементов в очереди;
     * 2.5 clear - Программа должна очистить очередь и вывести ok;
     * 2.6 exit - Программа должна вывести bye и завершить работу.
     * <p>
     * Программа считывает
     * последовательность команд и в зависимости от команды выполняет ту или иную операцию.
     * После выполнения каждой команды программа должна вывести одну строчку.
     * <p>
     * Перед исполнением операций front и pop программа должна проверять, содержится ли в очереди
     * хотя бы один элемент. Если во входных данных встречается операция front или pop, и при этом
     * очередь пуста, то программа должна вместо числового значения вывести строку error.
     * <p>
     * Входные данные
     * Вводятся команды управления очередью, по одной на строке. Количество команд не превосходит
     * миллиона, в каждый момент времени в очереди не более 200 элементов.
     * <p>
     * Выходные данные
     * Требуется вывести протокол работы очереди, по одному сообщению на строке
     *
     * @param commands - последовательность команд
     * @return последовательность строчек согласно переданным командам
     */
    List<String> generateProtocol(List<String> commands);
}
