package com.dfedorino.rtasks.third_level;

import java.util.List;

public interface ProtectedDequeProtocol {
    /**
     * Реализуйте структуру данных "очередь". Напишите программу:
     * 1. содержащую описание очереди;
     * 2. моделирующую работу очереди;
     * 2.1 push_front n - Добавить (положить) в начало дека новый элемент. Программа должна вывести ok;
     * 2.2 push_back - Добавить (положить) в конец дека новый элемент. Программа должна вывести ok;
     * 2.3 pop_front - Извлечь из дека первый элемент. Программа должна вывести его значение;
     * 2.4 pop_back - Извлечь из дека последний элемент. Программа должна вывести его значение;
     * 2.3 front - Узнать значение первого элемента (не удаляя его). Программа должна вывести его значение;
     * 2.6 back - Узнать значение последнего элемента (не удаляя его). Программа должна вывести его значение;
     * 2.4 size - Программа должна вывести количество элементов в очереди;
     * 2.5 clear - Программа должна очистить очередь и вывести ok;
     * 2.6 exit - Программа должна вывести bye и завершить работу.
     * <p>
     * Программа считывает
     * последовательность команд и в зависимости от команды выполняет ту или иную операцию.
     * После выполнения каждой команды программа должна вывести одну строчку. Возможные команды
     * для программы.
     * <p>
     * Гарантируется, что количество элементов в деке в любой момент не превосходит 100.
     * Перед исполнением операций pop_front, pop_back, front, back программа должна проверять,
     * содержится ли в деке хотя бы один элемент. Если во входных данных встречается операция
     * pop_front, pop_back, front, back, и при этом дек пуст, то программа должна вместо числового
     * значения вывести строку error.
     * <p>
     * Входные данные
     * Вводятся команды управления деком, по одной на строке.
     * Общее количество операций не превосходит миллиона.
     * <p>
     * Выходные данные
     * Требуется вывести протокол работы дека, по одному сообщению на строке
     *
     * @param commands - последовательность команд
     * @return последовательность строчек согласно переданным командам
     */
    List<String> generateProtocol(List<String> commands);
}
