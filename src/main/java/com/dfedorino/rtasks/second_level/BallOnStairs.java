package com.dfedorino.rtasks.second_level;

public class BallOnStairs {
    /**
     * На вершине лесенки, содержащей N ступенек, находится мячик, который начинает прыгать по ним вниз, к основанию.
     * Мячик может прыгнуть на следующую ступеньку, на ступеньку через одну или через 2.
     * (То есть, если мячик лежит на 8-ой ступеньке, то он может переместиться на 5-ую, 6-ую или 7-ую.)
     * Определить число всевозможных "маршрутов" мячика с вершины на землю.
     * <p>
     * Входные данные
     * Вводится одно число 0 < N < 31.
     * <p>
     * Выходные данные
     * Выведите одно число — количество маршрутов.
     * <p>
     * Ход размышлений:
     * 1.  разбиваем задачу на простейшие подзадачи:
     * 1.1 для длины лестницы n рассмотрим все возможные варианты достижения земли:
     * 1.2 если мячик сначала прыгнет на 1 ступень ниже, то до земли останется n - 1 вариантов маршрутов;
     * 1.3 если мячик сначала прыгнет на 2 ступени ниже, то до земли останется n - 2 вариантов маршрутов;
     * 1.4 если мячик сначала прыгнет на 3 ступени ниже, то до земли останется n - 3 вариантов маршрутов;
     * 1.5 то есть кол-во маршрутов для высоты лестницы n справедлива формула f(n) = f(n - 1) + f(n - 2) + f(n - 3);
     * 2.  C каких ступенек мячик спрыгивает сразу на землю?
     * 2.1 Зависит от максимального кол-ва ступенек, которые мячик может преодолеть за 1 прыжок:
     * 2.2 n = 0, f(0) = 0;
     * 2.3 n = 1, f(1) = 1;
     * 2.4 n = 2, f(2) = f(1) + f(0) + 1;
     * 2.5 n = 3, f(3) = f(2) + f(1) + 1;
     * 2.6 то есть для любой ступеньки n, с которой мячик может сразу спрыгнуть на землю справедливо f(n) = f(n - 1) + f(n - 2) + 1;
     * 2.7 В итоге получается можно сделать вывод, что при длине n кол-во возможных вариантов добраться до земли:
     * 2.7.1 f(n) = f(n - 1) + f(n - 2) + 1 при n < 4
     * 2.7.2 f(n) = f(n - 1) + f(n - 2) + f(n - 3) при n >= 4
     *
     * @param height - число 0 < N < 31.
     * @return количество маршрутов.
     */
    public int getWaysToGroundForHeight(int height) {
        int[] ways = new int[height + 1];
        for (int currentHeight = 1; currentHeight < ways.length; currentHeight++) {
            if (currentHeight == 1) {
                ways[1] = 1;
            } else {
                int remainingWays = currentHeight < 4 ? 1 : ways[currentHeight - 3];
                ways[currentHeight] = ways[currentHeight - 1] + ways[currentHeight - 2] + remainingWays;
            }
        }
        return ways[height];
    }
}
