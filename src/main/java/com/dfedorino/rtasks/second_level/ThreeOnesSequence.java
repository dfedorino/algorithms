package com.dfedorino.rtasks.second_level;

public class ThreeOnesSequence {
    /**
     * Определите количество последовательностей из нулей и единиц длины N
     * (длина - это общее количество нулей и едииниц), в которых никакие три
     * единицы не стоят рядом.
     * <p>
     * Вводится натуральное число N, не превосходящее 40.
     * <p>
     * Выходные данные
     * Выведите количество искомых последовательностей. Гарантируется, что ответ не превосходит 2^31 − 1.
     * <p>
     * Ход размышлений:
     * 1. разделить подзадачу на простейшие подзадачи:
     * 1.1 есть комбинация длины n, если она:
     * 1.2 заканчивается на [..., 0], то подходят все комбинации n - 1;
     * 1.3 заканчивается на [... 0, 1], то подходят все комбинации n - 2;
     * 1.4 заканчивается на [..., 0, 1, 1], то подходят все комбинации n - 3;
     * 2. для каких простейших данных точно известны все варианты?
     * 2.1 если последовательность длины 0, то искомых комбинаций -> 0 []
     * 2.2 если последовательность длины 1, то искомых комбинаций -> 2 [0] [1]
     * 2.3 если последовательность длины 2, то искомых комбинаций -> 4 [00] [01] [10] [11]
     * 2.4 если последовательность длины 3, то искомых комбинаций -> 7 [000] [001] [010] [011] [100] [101] [110]
     *
     * @param length - натуральное число N, не превосходящее 40.
     * @return количество искомых последовательностей.
     */
    public int countGoodCombinationsForLength(int length) {
        int[] combinations = new int[length + 1];
        for (int l = 1; l < combinations.length; l++) {
            switch (l) {
                case 1:
                    combinations[1] = 2;
                    break;
                case 2:
                    combinations[2] = 4;
                    break;
                case 3:
                    combinations[3] = 7;
                    break;
                default:
                    combinations[l] = combinations[l - 3] + combinations[l - 2] + combinations[l - 1];
                    break;
            }
        }
        return combinations[length];
    }
}
