package com.dfedorino.rtasks.first_level;

import java.util.Deque;
import java.util.LinkedList;

public class SymmetricSequence {
    /**
     * Последовательность чисел назовем симметричной, если она одинаково читается как слева направо,
     * так и справа налево. Например, следующие последовательности являются симметричными:
     * 1 2 3 4 5 4 3 2 1
     * 1 2 1 2 2 1 2 1
     * Вашей программе будет дана последовательность чисел. Требуется определить, какое минимальное
     * количество и каких чисел надо приписать в конец этой последовательности, чтобы она стала симметричной.
     * <p>
     * Входные данные
     * Сначала вводится число N — количество элементов исходной последовательности (1 ≤ N ≤ 100). Далее идут
     * N чисел — элементы этой последовательности, натуральные числа от 1 до 9.
     * <p>
     * Выходные данные
     * Выведите сначала число M— минимальное количество элементов, которое надо дописать к последовательности,
     * а потом M чисел (каждое — от 1 до 9) — числа, которые надо дописать к последовательности.
     *
     * @param sequence - элементы последовательности
     * @return строка, в которой первым числом идет минимальное кол-во элементов, которые нужно дописать к
     * последовательности, затем числа, которые нужно дописать
     */
    public String getSymmetricEnding(int[] sequence) {
        Deque<Integer> ending = new LinkedList<>();
        for (int i = 0; i < sequence.length - 1; i++) {
            if (sequence[i] != sequence[i + 1]) {
                ending.addFirst(sequence[i]);
            }
        }
        return ending.size() + " " + ending;
    }
}
