package com.dfedorino.rtasks.first_level;

public class VendingMachine {
    /**
     * Стоимость стакана чая и кофе в автомате предполагается установить равной пяти рублям. Автоматы будут
     * принимать монеты по 5 и 10 рублей, а также купюры в 10, 50 и 100 рублей. Когда пассажиру надо
     * выдавать сдачу (т.е. когда пассажир бросил в автомат десятирублёвую монету или 10-, 50- или
     * 100-рублёвую купюру), автомат выдаёт сдачу пятирублёвыми монетами; если же пассажир бросил в автомат
     * пятирублёвую монету, то автомат её сохраняет и может использовать для сдачи следующим пассажирам.
     * <p>
     * Ясно, что, чтобы обеспечить возможность выдачи сдачи всем покупателям, может потребоваться изначально
     * загрузить в автомат некоторое количество пятирублёвых монет. Сейчас на маршрутках фирмы проходят
     * испытания с целью определить минимальное количество монет, которые надо загрузить в автомат перед
     * выездом маршрутки в рейс. Вам дан протокол одного из таких испытаний: известен порядок, в котором
     * пассажиры оплачивали свои покупки различными монетами и купюрами. Определите, какое минимальное
     * количество пятирублёвых монет должно было изначально находиться в автомате, чтобы всем пассажирам
     * хватило сдачи.
     * <p>
     * Входные данные
     * В первой строке входного файла находится одно натуральное число
     * N — количество покупок в автомате, которые были совершены в ходе испытания (1≤N≤50_000).
     * Во второй строке находятся N натуральных чисел, каждое из которых равно номиналу монеты или купюры, которую
     * использовал очередной покупатель для оплаты; каждый номинал может принимать одно из четырёх значений:
     * 5, 10, 50 или 100.
     * <p>
     * Выходные данные
     * В выходной файл выведите одно число — минимальное количество пятирублёвых монет, которые надо было загрузить
     * в автомат изначально, чтобы всем покупателям хватило сдачи.
     */
    public int getInitialChangeQuantity(int[] purchases) {
        int initialChangeQuantity = 0;
        int changeFromBuyers = 0;
        for (Integer sum : purchases) {
            if (sum != 5) {
                initialChangeQuantity += (sum - 5) / 5;
            } else {
                changeFromBuyers++;
            }
        }
        int finalChangeQuantity = initialChangeQuantity - changeFromBuyers;
        return Math.max(finalChangeQuantity, 0);
    }
}
